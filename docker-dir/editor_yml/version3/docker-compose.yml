version: '3'
services:
  web_101:
    build:
      context: build-dir
      dockerfile: Dockerfile
      args: test
      cache_from: test
      labels: test
      shm_size: test
      target: test
    cap_add:
    cap_drop:
    command:
    configs:
      Short syntax
      Long syntax
    cgroup_parent:
    container_name:
    credential_spec:
    deploy:
      endpoint_mode:
      labels:
      mode:
      placement:
      replicas:
      resources:
      restart_policy:
      update_config:

    devices:
    depends_on:
    dns:
    dns_search:
    tmpfs:
    entrypoint:
    env_file:
    environment:
    expose:
    external_links:
    extra_hosts:
    healthcheck:
    image:
    isolation:
    labels:
    links:
    logging:
    network_mode:
    networks:
      aliases:
      ipv4_address:
      ipv6_address:
    pid:
    ports:
      Short syntax
      Long syntax
    secrets:
      Short syntax
      Long syntax
    security_opt:
    stop_grace_period:
    stop_signal:
    sysctls:
    ulimits:
    userns_mode:
    volumes:
      Short syntax
      Long syntax
    restart: "no"
    restart: always
    restart: on-failure
    restart: unless-stopped
    user: postgresql
    working_dir: /code

    domainname: foo.com
    hostname: foo
    ipc: host
    mac_address: 02:42:ac:11:65:43

    privileged: true


    read_only: true
    shm_size: 64M
    stdin_open: true
    tty: true


    driver: foobar
    driver_opts:
       foo: "bar"
       baz: 1
    labels:
      com.example.description: "Database volume"
      com.example.department: "IT/Ops"
      com.example.label-with-empty-value: ""

    labels:
      - "com.example.description=Database volume"
      - "com.example.department=IT/Ops"
      - "com.example.label-with-empty-value"



#  --------------------------------------------------------
  db:
      image: postgres:9.4
      volumes:
        - db-data:/var/lib/postgresql/data
      networks:
        - backend
      deploy:
        placement:
          constraints: [node.role == manager]
#  --------------------------------------------------------

  db1:
      image: db
      volumes:
        - data-volume:/var/lib/db
  backup:
      image: backup-service
      volumes:
        - data-volume:/var/lib/backup/data
  web:
        ...
        networks:
          hostnet: {}

  proxy:
      build: ./proxy
      networks:
        - outside
        - default
    app:
      build: ./app
      networks:
        - default

  web:
      image: nginx:alpine
      ports:
        - "80:80"
      volumes:
        - type: volume
          source: mydata
          target: /data
          volume:
            nocopy: true
        - type: bind
          source: ./static
          target: /opt/app/static


volumes:
    data-volume:
      external: true
        name: actual-name-of-volume

networks:
    hostnet:
      external:
        name: host
    mynet1:
        driver: overlay
        attachable: true
        enable_ipv6
    outside:
        external: true
    network1:
        name: my-app-net
    network2:
        external: true
        name: my-app-net

configs:
  my_first_config:
    file: ./config_data
  my_second_config:
    external: true

configs:
  my_first_config:
    file: ./config_data
  my_second_config:
    external:
      name: redis_config

ipam:
  driver: default
  config:
    - subnet: 172.28.0.0/16
internal: true
labels:
  com.example.description: "Financial transaction network"
  com.example.department: "Finance"
  com.example.label-with-empty-value: ""

labels:
  - "com.example.description=Financial transaction network"
  - "com.example.department=Finance"
  - "com.example.label-with-empty-value"
            external
            name

